# Укажем использовать образ докера с установленным мавеном той же версии что был у нас в ПОМ файле
FROM maven:3.8-openjdk-17-slim

# Создадим переменную окружения в контейнере докера. Типа "Эй докер ищи jar и исходный код тут!"
ENV HOME=/home/app
# Создадим эту самую директорию. Флаг -p создает все необходимые родительские директории.
RUN mkdir -p $HOME

# Копируем наш файл сеттингс.хмл из корня в директорию реф (В нем мы указали репозитори мавена (В т.ч не официальные,
# чтобы он мог скачать все зависимости если основной лежит))
ADD ./settings.xml /usr/share/maven/ref/
# Создадим переменную окружения для мавена. Типа "Эй МАВЕН ищи инструкции как тебе настроиться тут!"
ENV MVN_SETTINGS=/usr/share/maven/ref/settings.xml

# Создим директорию внутри контейнера.  В которую потом положим исходный код нашего модуля (dataModule)
# (не знаю важно ли чтобы директория называлась так же как наш АртефактИД. На всякий случай пусть будет 1 в 1).
RUN mkdir -p $HOME/datamodulemultipart
# ***Начинаем складывать исходный код в только что созданную директорию внутри докер контейнера***
# **Сейчас наш пом.хмл лежит на нашем компе относительно этого докер файла в ./dispatcher/pom.xml**
# Говорим докеру чтобы он скопировал его отсюда в свой контейнер в папку которую мы создали на предыдущем шаге для
# нашего модуля "dataModule"
ADD ./datamodulemultipart/pom.xml $HOME/datamodulemultipart
# Аналогично копируем директорию срц в папку с нашим модулем внутри докер контейнера
ADD ./datamodulemultipart/src $HOME/datamodulemultipart/src

# Запускаем МАВЕН --debug. Параметры перед ним:
# clean package стандартная команда Maven для очистки (удаления предыдущих сборок) и сборки проекта
# -s $MVN_SETTINGS указывает Maven, какой файл settings.xml использовать.(Указываем переменую окружения созданную раньше)
# В результате будет создан наш джар в папке $HOME/dataModule/target/dataModule-0.0.1.jar
# !!!!! dataModule-0.0.1.jar формируется из Артифакт ИД + вершн из ПОМ.хмл
RUN mvn -f $HOME/datamodulemultipart/pom.xml -s $MVN_SETTINGS clean package --debug

# Запускаем наш джарник.
# Все предыдущие команды выполняются однажды при сборке контейнера, а эта при каждом старте контейнера.
CMD java -jar $HOME/datamodulemultipart/target/datamodulemultipart-0.0.1.jar

# Если наше приложение зависит от какой то библиотеки которая тоже лежит у нас на компе нужно ее тоже добавить в
# соответствующую директорию и скомпилировать ее в ждарник  и добавить в в локальный Maven-репозиторий (внутри контейнера)
# перед запуском ОСНОВОНОГО джарника

# Если бы у нас была например какая то библиотека, например common которая бы использовалась нашим модулем то:

#RUN mkdir -p $HOME/common
#ADD ./common $HOME/common
#RUN mvn -f $HOME/common/pom.xml -s $MVN_SETTINGS clean package
#RUN mvn org.apache.maven.plugins:maven-install-plugin:2.5.2:install-file -Dfile=$HOME/common/target/common-0.0.1.jar --debug

# Вставить этот код нужно было бы после ENV MVN_SETTINGS=/usr/share/maven/ref/settings.xml
# Перед RUN mkdir -p $HOME/dataModule
# Чтобы она уже была в репозитории при сборке нашего основного модуля